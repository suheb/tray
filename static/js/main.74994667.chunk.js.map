{"version":3,"sources":["containers/UserForm/UserForm.tsx","containers/PrivacyForm/PrivacyForm.tsx","containers/DoneForm/DoneForm.tsx","containers/MultiStepForm/MultiStepForm.tsx","containers/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["UserForm","props","formInputConfig","name","regex","error","email","password","intialFormData","role","useState","formData","setFormData","formError","setFormError","isInputValid","value","test","handleChange","event","target","id","newFormError","Grid","container","justify","spacing","item","xs","TextField","required","fullWidth","label","helperText","onChange","type","Button","variant","color","onClick","Object","keys","forEach","fieldName","length","handleSubmit","PrivacyForm","checked","FormControlLabel","control","Checkbox","handleBack","DoneForm","fontSize","Typography","gutterBottom","MultiStepForm","step","activeStep","setActiveStep","fullFormData","setFullFormData","formName","isActiveStep","steps","useEffect","console","log","direction","alignContent","sm","ButtonGroup","map","index","key","disabled","values","theme","createMuiTheme","palette","primary","green","secondary","lightBlue","App","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.74994667.chunk.js","sourcesContent":["import React, { useState, ChangeEvent } from \"react\";\nimport { TextField, Grid, Button } from \"@material-ui/core\";\n\ninterface UserFormProps {\n  formData?: { [field: string]: any }\n  handleSubmit(formName:string, formData: { [field: string]: any }): void\n}\ninterface InputConfig {\n  regex: RegExp,\n  error: string\n}\n\nconst UserForm = (props: UserFormProps) => {\n  const formInputConfig: {[field: string]: InputConfig} = {\n    name: {\n      regex: /\\S/,\n      error: \"Required\"\n    },\n    email: {\n      regex: /\\S+@\\S+\\.\\S+/,\n      error: \"Invalid email\"\n    },\n    password: {\n      regex: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])[\\S]{9,}$/,\n      error: \"Must have atleast 9 characters with atleast 1 number, 1 uppercase + lowercase character.\"\n    }\n  }\n  const intialFormData = {\n    name: \"\",\n    role: \"\",\n    email: \"\",\n    password:\"\"\n  }\n\n  const [formData, setFormData] = useState<{ [field: string]: any }>(props.formData || intialFormData);\n  const [formError, setFormError] = useState<{ [field: string]: string }>({});\n\n  const isInputValid = (name: string, value: string) => {\n    if (name in formInputConfig) {\n      return formInputConfig[name].regex.test(value)\n    }\n    return true\n  }\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const value = event.target.value\n    const name = event.target.id\n    // Set error\n    if (isInputValid(name, value)) {\n      const newFormError = {...formError};\n      delete newFormError[name]\n      setFormError(newFormError)\n    } else {\n      setFormError({\n        ...formError,\n        [name]: formInputConfig[name] ? formInputConfig[name].error : \"Invalid\"\n      })\n    }\n\n    // Set field value\n    setFormData({\n      ...formData,\n      [name]: value\n    })\n  }\n  const handleSubmit = () => {\n    const newFormError = { ...formError }\n    Object.keys(intialFormData).forEach(fieldName => {\n      if (!isInputValid(fieldName, formData[fieldName])) {\n        newFormError[fieldName] = formInputConfig[fieldName] ? formInputConfig[fieldName].error : \"Invalid\"\n      }\n    })\n    if (Object.keys(newFormError).length === 0) {\n      props.handleSubmit(\"user\", formData)\n    } else {\n      setFormError(newFormError)\n    }\n  }\n  return (\n    <Grid\n      container\n      justify=\"flex-end\"\n      spacing={2}\n    >\n      <Grid\n        item\n        xs={12}\n      >\n        <TextField\n          required\n          fullWidth\n          id=\"name\"\n          label=\"Name\"\n          value={formData[\"name\"] || \"\"}\n          error={\"name\" in formError}\n          helperText={formError[\"name\"]}\n          onChange={handleChange}\n        />\n      </Grid>\n\n      <Grid\n        item\n        xs={12}\n      >\n        <TextField\n          fullWidth\n          id=\"role\"\n          label=\"Role\"\n          value={formData[\"role\"] || \"\"}\n          error={\"role\" in formError}\n          helperText={formError[\"role\"]}\n          onChange={handleChange}\n        />\n      </Grid>\n      <Grid\n        item\n        xs={12}\n      >\n        <TextField\n          fullWidth\n          required\n          id=\"email\"\n          label=\"Email\"\n          type=\"email\"\n          value={formData[\"email\"] || \"\"}\n          error={\"email\" in formError}\n          helperText={formError[\"email\"]}\n          onChange={handleChange}\n        />\n      </Grid>\n      <Grid\n        item\n        xs={12}\n      >\n        <TextField\n          fullWidth\n          required\n          id=\"password\"\n          label=\"Password\"\n          type=\"password\"\n          value={formData[\"password\"] || \"\"}\n          error={\"password\" in formError}\n          helperText={formError[\"password\"]}\n          onChange={handleChange}\n        />\n      </Grid>\n      <Grid\n        item\n        xs={3}\n      >\n        <Button\n          fullWidth\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={handleSubmit}\n        >\n          Submit\n        </Button>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default UserForm;\n","import React, { useState, ChangeEvent } from \"react\";\nimport { Grid, Button, FormControlLabel, Checkbox } from \"@material-ui/core\";\n\n\ninterface PrivacyFormProps {\n  formData?: { [field: string]: any }\n  handleBack(): void\n  handleSubmit(formName: string, formData: { [field: string]: any }): void\n}\n\nconst PrivacyForm = (props: PrivacyFormProps) => {\n  const initialFormData = {\n    \"firstPartyEmail\": false,\n    \"thirdPartyEmail\": false\n  }\n  const [formData, setFormData] = useState<{ [field: string]: any }>(props.formData || initialFormData)\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const value = event.target.checked\n    const name = event.target.id\n\n    // Set field value\n    setFormData({\n      ...formData,\n      [name]: value\n    })\n  }\n\n  const handleSubmit = () => {\n    props.handleSubmit(\"privacy\", formData);\n  }\n  return (\n    <Grid\n      container\n      justify=\"flex-end\"\n      spacing={2}\n    >\n      <Grid\n        item\n        xs={12}\n      >\n        <FormControlLabel\n          control={\n            <Checkbox\n              id=\"firstPartyEmail\"\n              color=\"primary\"\n              checked={formData[\"firstPartyEmail\"] || false}\n              onChange={handleChange}\n            />\n          }\n          label=\"Receive updates about Tray.io products by email\"\n        />\n      </Grid>\n\n      <Grid\n        item\n        xs={12}\n      >\n        <FormControlLabel\n          control={\n            <Checkbox\n              id=\"thirdPartyEmail\"\n              color=\"primary\"\n              checked={formData[\"thirdPartyEmail\"] || false}\n              onChange={handleChange}\n            />\n          }\n          label=\"Receive communication by email for other products created by the Tray.io team\"\n        />\n      </Grid>\n      <Grid\n        item\n        xs={3}\n      >\n        <Button\n          fullWidth\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={props.handleBack}\n        >\n          Back\n        </Button>\n      </Grid>\n      <Grid\n        item\n        xs={3}\n      >\n        <Button\n          fullWidth\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={handleSubmit}\n        >\n          Submit\n        </Button>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default PrivacyForm;\n","import React from \"react\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport DoneIcon from '@material-ui/icons/Done';\n\n\nconst DoneForm = () => {\n  return (\n    <Grid\n      container\n      justify=\"center\"\n      spacing={2}\n    >\n      <Grid\n        item\n        xs={2}\n      >\n        <DoneIcon fontSize=\"large\" color=\"primary\" />\n      </Grid>\n\n      <Grid\n        item\n        xs={12}\n      >\n        <Typography variant=\"subtitle1\" color=\"primary\" gutterBottom>\n          Please verify your email address, you should have received an email from us already!\n        </Typography>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default DoneForm;\n","import React, { useState, useEffect } from \"react\";\nimport { Grid, Button, ButtonGroup } from \"@material-ui/core\";\nimport UserForm from \"../UserForm/UserForm\";\nimport PrivacyForm from \"../PrivacyForm/PrivacyForm\";\nimport DoneForm from \"../DoneForm/DoneForm\";\n\n\nconst MultiStepForm = () => {\n  const [activeStep, setActiveStep] = useState(0);\n  const [fullFormData, setFullFormData] = useState<{ [name: string]: Object }>({});\n\n  const handleSubmit = (formName: string, formData: { [name: string]: any }) => {\n    setFullFormData({\n      ...fullFormData,\n      [formName]: formData\n    });\n    setActiveStep(activeStep + 1);\n  }\n  const handleBack = () => setActiveStep(activeStep - 1)\n  const getStepContent = (step: number) => Object.values(steps)[step]\n  const isActiveStep = (step: number) => step === activeStep\n\n  const steps = {\n    \"User\": (\n      <UserForm\n        formData={fullFormData[\"user\"]}\n        handleSubmit={handleSubmit}\n      />\n    ),\n    \"Privacy\": (\n      <PrivacyForm\n        formData={fullFormData[\"privacy\"]}\n        handleSubmit={handleSubmit}\n        handleBack={handleBack} />\n    ),\n    \"Done\": (\n      <DoneForm />\n    )\n  }\n\n  useEffect(() => {\n    if (activeStep === Object.keys(steps).length - 1) {\n      console.log(fullFormData);\n    }\n  }, [activeStep, steps, fullFormData]);\n\n  return (\n    <Grid\n      container\n      direction=\"column\"\n      alignContent=\"center\"\n    >\n      <Grid\n        item\n        sm={4}\n      >\n        <ButtonGroup color=\"secondary\" fullWidth>\n          {Object.keys(steps).map((step, index) => <Button key={step} disabled={!isActiveStep(index)}>{step}</Button>)}\n        </ButtonGroup>\n      </Grid>\n      <Grid\n        item\n        sm={4}\n      >\n        <>\n          {getStepContent(activeStep)}\n        </>\n      </Grid>\n    </Grid>\n  )\n}\n\nexport default MultiStepForm;\n","import React from 'react';\n\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core';\n\nimport { green, lightBlue } from '@material-ui/core/colors';\n\nimport MultiStepForm from '../MultiStepForm/MultiStepForm';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: green,\n    secondary: lightBlue,\n  }\n});\n\nfunction App() {\n  return (\n    <ThemeProvider\n      theme={theme}\n    >\n      <MultiStepForm />\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}